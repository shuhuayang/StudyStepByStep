https://github.com/GuozhuHe/webspider

http://www.lfd.uci.edu/~gohlke/pythonlibs/

https://segmentfault.com/a/1190000007031057

2.概念
a.实例变量data
class Kls(object):
    def __init__(self, data):
        self.data = data
b.类变量data
class Kls(object):
    data = 0
    def __init__(self, data):
        self.data = data
c.静态变量
IND = 'ON'
class Kls(object):
    def __init__(self, data):
        self.data = data


a.构造方法(第一个参数是self，即对象本身)
class Kls(object):
    def __init__(self, data):
        self.data = data
调用：ik1 = Kls('arun')，不需要传self参数，Python解释器自己会做这些操作的
b.实例方法，即instance method(第一个参数为self，即对象本身)
class Kls(object):
    def __init__(self, data):
        self.data = data
    def printd(self):
        print(self.data)
调用：ik1 = Kls('arun')   ik1.printd()，不需要传对象self参数，Python解释器自己会做这些操作的。
c.类方法，class method
仅仅与类交互而不牵扯和实例交互
class Kls(object):
    no_inst = 0
    def __init__(self):
        Kls.no_inst = Kls.no_inst + 1
    @classmethod
    def get_no_of_instance(cls_obj):
        return cls_obj.no_inst
调用：Kls.get_no_of_instance()
d.静态方法，static method
有一些跟类有关（比如，该类方法或实例方法需要的方法），但运行时不依赖类和实例
IND = 'ON'
class Kls(object):
    def __init__(self, data):
        self.data = data
    @staticmethod
    def checkind():
        return (IND == 'ON')
    def do_reset(self):
        if self.checkind():
            print('Reset done for:', self.data)
调用：
e.其他方法
随便写的。


注：各种类型的方法Python解释器传入的第一个参数不同。

1.虚拟环境
所有第三方的包都会被pip安装到Python3的site-packages目录下
如果我们要同时开发多个应用程序，那这些应用程序都会共用一个Python,如果应用A需要jinja 2.7，而应用B需要jinja 2.6怎么办？
这种情况下，每个应用可能需要各自拥有一套“独立”的Python运行环境。virtualenv就是用来为一个应用创建一套“隔离”的Python运行环境。
$ pip3 install virtualenv
然后，假定我们要开发一个新的项目，需要一套独立的Python运行环境，可以这么做：
第一步，创建目录：
$ mkdir myproject
$ cd myproject/
第二步，创建一个独立的Python运行环境，命名为venv：
$ virtualenv --no-site-packages --python=python3.4 venv     # 参数--no-site-packages表示不会复制第三方jar包，而--system-site-packages与之相反；参数--python指定虚拟环境使用的python版本，通常当你的系统中安装了多个python版本时会用到，也可以使用virtualenv -p /usr/bin/python3 webspider代替，可使用  virtualenv -h  查看参数详情。
创建完后会在当前文件夹下生成对应目录venv。
激活虚拟环境:
source venv/bin/active
(venv)Ubuntu:myproject michael$
注意到命令提示符变了，有个(venv)前缀，表示当前环境是一个名为venv的Python环境。
下面正常安装各种第三方包，并运行python命令：
(venv)Ubuntu:myproject michael$ pip3 install jinja2
在venv环境下，用pip安装的包都被安装到venv这个环境下，系统Python环境不受任何影响。也就是说，venv环境是专门针对myproject这个应用创建的。
退出当前的venv环境，使用deactivate命令
